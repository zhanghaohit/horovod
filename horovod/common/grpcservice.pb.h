// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcservice.proto

#ifndef PROTOBUF_INCLUDED_grpcservice_2eproto
#define PROTOBUF_INCLUDED_grpcservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_grpcservice_2eproto 

namespace protobuf_grpcservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_grpcservice_2eproto
namespace grpcservice {
class ActionReply;
class ActionReplyDefaultTypeInternal;
extern ActionReplyDefaultTypeInternal _ActionReply_default_instance_;
class AutobotJobNode;
class AutobotJobNodeDefaultTypeInternal;
extern AutobotJobNodeDefaultTypeInternal _AutobotJobNode_default_instance_;
class ErrorCodeReply;
class ErrorCodeReplyDefaultTypeInternal;
extern ErrorCodeReplyDefaultTypeInternal _ErrorCodeReply_default_instance_;
class NumOfRankReply;
class NumOfRankReplyDefaultTypeInternal;
extern NumOfRankReplyDefaultTypeInternal _NumOfRankReply_default_instance_;
class URIReply;
class URIReplyDefaultTypeInternal;
extern URIReplyDefaultTypeInternal _URIReply_default_instance_;
}  // namespace grpcservice
namespace google {
namespace protobuf {
template<> ::grpcservice::ActionReply* Arena::CreateMaybeMessage<::grpcservice::ActionReply>(Arena*);
template<> ::grpcservice::AutobotJobNode* Arena::CreateMaybeMessage<::grpcservice::AutobotJobNode>(Arena*);
template<> ::grpcservice::ErrorCodeReply* Arena::CreateMaybeMessage<::grpcservice::ErrorCodeReply>(Arena*);
template<> ::grpcservice::NumOfRankReply* Arena::CreateMaybeMessage<::grpcservice::NumOfRankReply>(Arena*);
template<> ::grpcservice::URIReply* Arena::CreateMaybeMessage<::grpcservice::URIReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grpcservice {

enum ErrorCode {
  SUCCESS = 0,
  FAILED_LOCK = 1,
  DB_ERR = 2,
  NOT_FOUND = 3,
  OTHER = 4,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = OTHER;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum Action {
  DO_NOTHING = 0,
  NEW_NODE_READY = 1,
  NUM_NODE_REDUCED = 2,
  SHOULD_STOP = 3,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Action_IsValid(int value);
const Action Action_MIN = DO_NOTHING;
const Action Action_MAX = SHOULD_STOP;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class AutobotJobNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpcservice.AutobotJobNode) */ {
 public:
  AutobotJobNode();
  virtual ~AutobotJobNode();

  AutobotJobNode(const AutobotJobNode& from);

  inline AutobotJobNode& operator=(const AutobotJobNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutobotJobNode(AutobotJobNode&& from) noexcept
    : AutobotJobNode() {
    *this = ::std::move(from);
  }

  inline AutobotJobNode& operator=(AutobotJobNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutobotJobNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutobotJobNode* internal_default_instance() {
    return reinterpret_cast<const AutobotJobNode*>(
               &_AutobotJobNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AutobotJobNode* other);
  friend void swap(AutobotJobNode& a, AutobotJobNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutobotJobNode* New() const final {
    return CreateMaybeMessage<AutobotJobNode>(NULL);
  }

  AutobotJobNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AutobotJobNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AutobotJobNode& from);
  void MergeFrom(const AutobotJobNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutobotJobNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string uri = 4;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // int32 rank = 3;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grpcservice.AutobotJobNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::int32 rank_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpcservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorCodeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpcservice.ErrorCodeReply) */ {
 public:
  ErrorCodeReply();
  virtual ~ErrorCodeReply();

  ErrorCodeReply(const ErrorCodeReply& from);

  inline ErrorCodeReply& operator=(const ErrorCodeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorCodeReply(ErrorCodeReply&& from) noexcept
    : ErrorCodeReply() {
    *this = ::std::move(from);
  }

  inline ErrorCodeReply& operator=(ErrorCodeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorCodeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorCodeReply* internal_default_instance() {
    return reinterpret_cast<const ErrorCodeReply*>(
               &_ErrorCodeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ErrorCodeReply* other);
  friend void swap(ErrorCodeReply& a, ErrorCodeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorCodeReply* New() const final {
    return CreateMaybeMessage<ErrorCodeReply>(NULL);
  }

  ErrorCodeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorCodeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorCodeReply& from);
  void MergeFrom(const ErrorCodeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorCodeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpcservice.ErrorCode errorCode = 1;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  ::grpcservice::ErrorCode errorcode() const;
  void set_errorcode(::grpcservice::ErrorCode value);

  // @@protoc_insertion_point(class_scope:grpcservice.ErrorCodeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int errorcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpcservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActionReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpcservice.ActionReply) */ {
 public:
  ActionReply();
  virtual ~ActionReply();

  ActionReply(const ActionReply& from);

  inline ActionReply& operator=(const ActionReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionReply(ActionReply&& from) noexcept
    : ActionReply() {
    *this = ::std::move(from);
  }

  inline ActionReply& operator=(ActionReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionReply* internal_default_instance() {
    return reinterpret_cast<const ActionReply*>(
               &_ActionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ActionReply* other);
  friend void swap(ActionReply& a, ActionReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionReply* New() const final {
    return CreateMaybeMessage<ActionReply>(NULL);
  }

  ActionReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActionReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActionReply& from);
  void MergeFrom(const ActionReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 nodeList = 2;
  int nodelist_size() const;
  void clear_nodelist();
  static const int kNodeListFieldNumber = 2;
  ::google::protobuf::int32 nodelist(int index) const;
  void set_nodelist(int index, ::google::protobuf::int32 value);
  void add_nodelist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodelist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodelist();

  // .grpcservice.Action action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::grpcservice::Action action() const;
  void set_action(::grpcservice::Action value);

  // @@protoc_insertion_point(class_scope:grpcservice.ActionReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodelist_;
  mutable int _nodelist_cached_byte_size_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpcservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class URIReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpcservice.URIReply) */ {
 public:
  URIReply();
  virtual ~URIReply();

  URIReply(const URIReply& from);

  inline URIReply& operator=(const URIReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  URIReply(URIReply&& from) noexcept
    : URIReply() {
    *this = ::std::move(from);
  }

  inline URIReply& operator=(URIReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const URIReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const URIReply* internal_default_instance() {
    return reinterpret_cast<const URIReply*>(
               &_URIReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(URIReply* other);
  friend void swap(URIReply& a, URIReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline URIReply* New() const final {
    return CreateMaybeMessage<URIReply>(NULL);
  }

  URIReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<URIReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const URIReply& from);
  void MergeFrom(const URIReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(URIReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:grpcservice.URIReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpcservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NumOfRankReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpcservice.NumOfRankReply) */ {
 public:
  NumOfRankReply();
  virtual ~NumOfRankReply();

  NumOfRankReply(const NumOfRankReply& from);

  inline NumOfRankReply& operator=(const NumOfRankReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumOfRankReply(NumOfRankReply&& from) noexcept
    : NumOfRankReply() {
    *this = ::std::move(from);
  }

  inline NumOfRankReply& operator=(NumOfRankReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NumOfRankReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumOfRankReply* internal_default_instance() {
    return reinterpret_cast<const NumOfRankReply*>(
               &_NumOfRankReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NumOfRankReply* other);
  friend void swap(NumOfRankReply& a, NumOfRankReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumOfRankReply* New() const final {
    return CreateMaybeMessage<NumOfRankReply>(NULL);
  }

  NumOfRankReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumOfRankReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumOfRankReply& from);
  void MergeFrom(const NumOfRankReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumOfRankReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 numOfRanks = 1;
  void clear_numofranks();
  static const int kNumOfRanksFieldNumber = 1;
  ::google::protobuf::int32 numofranks() const;
  void set_numofranks(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grpcservice.NumOfRankReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 numofranks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpcservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutobotJobNode

// string namespace = 1;
inline void AutobotJobNode::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutobotJobNode::namespace_() const {
  // @@protoc_insertion_point(field_get:grpcservice.AutobotJobNode.namespace)
  return namespace__.GetNoArena();
}
inline void AutobotJobNode::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpcservice.AutobotJobNode.namespace)
}
#if LANG_CXX11
inline void AutobotJobNode::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpcservice.AutobotJobNode.namespace)
}
#endif
inline void AutobotJobNode::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpcservice.AutobotJobNode.namespace)
}
inline void AutobotJobNode::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpcservice.AutobotJobNode.namespace)
}
inline ::std::string* AutobotJobNode::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:grpcservice.AutobotJobNode.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutobotJobNode::release_namespace_() {
  // @@protoc_insertion_point(field_release:grpcservice.AutobotJobNode.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutobotJobNode::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:grpcservice.AutobotJobNode.namespace)
}

// string name = 2;
inline void AutobotJobNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutobotJobNode::name() const {
  // @@protoc_insertion_point(field_get:grpcservice.AutobotJobNode.name)
  return name_.GetNoArena();
}
inline void AutobotJobNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpcservice.AutobotJobNode.name)
}
#if LANG_CXX11
inline void AutobotJobNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpcservice.AutobotJobNode.name)
}
#endif
inline void AutobotJobNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpcservice.AutobotJobNode.name)
}
inline void AutobotJobNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpcservice.AutobotJobNode.name)
}
inline ::std::string* AutobotJobNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grpcservice.AutobotJobNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutobotJobNode::release_name() {
  // @@protoc_insertion_point(field_release:grpcservice.AutobotJobNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutobotJobNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpcservice.AutobotJobNode.name)
}

// int32 rank = 3;
inline void AutobotJobNode::clear_rank() {
  rank_ = 0;
}
inline ::google::protobuf::int32 AutobotJobNode::rank() const {
  // @@protoc_insertion_point(field_get:grpcservice.AutobotJobNode.rank)
  return rank_;
}
inline void AutobotJobNode::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:grpcservice.AutobotJobNode.rank)
}

// string uri = 4;
inline void AutobotJobNode::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutobotJobNode::uri() const {
  // @@protoc_insertion_point(field_get:grpcservice.AutobotJobNode.uri)
  return uri_.GetNoArena();
}
inline void AutobotJobNode::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpcservice.AutobotJobNode.uri)
}
#if LANG_CXX11
inline void AutobotJobNode::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpcservice.AutobotJobNode.uri)
}
#endif
inline void AutobotJobNode::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpcservice.AutobotJobNode.uri)
}
inline void AutobotJobNode::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpcservice.AutobotJobNode.uri)
}
inline ::std::string* AutobotJobNode::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:grpcservice.AutobotJobNode.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutobotJobNode::release_uri() {
  // @@protoc_insertion_point(field_release:grpcservice.AutobotJobNode.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutobotJobNode::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:grpcservice.AutobotJobNode.uri)
}

// -------------------------------------------------------------------

// ErrorCodeReply

// .grpcservice.ErrorCode errorCode = 1;
inline void ErrorCodeReply::clear_errorcode() {
  errorcode_ = 0;
}
inline ::grpcservice::ErrorCode ErrorCodeReply::errorcode() const {
  // @@protoc_insertion_point(field_get:grpcservice.ErrorCodeReply.errorCode)
  return static_cast< ::grpcservice::ErrorCode >(errorcode_);
}
inline void ErrorCodeReply::set_errorcode(::grpcservice::ErrorCode value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:grpcservice.ErrorCodeReply.errorCode)
}

// -------------------------------------------------------------------

// ActionReply

// .grpcservice.Action action = 1;
inline void ActionReply::clear_action() {
  action_ = 0;
}
inline ::grpcservice::Action ActionReply::action() const {
  // @@protoc_insertion_point(field_get:grpcservice.ActionReply.action)
  return static_cast< ::grpcservice::Action >(action_);
}
inline void ActionReply::set_action(::grpcservice::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:grpcservice.ActionReply.action)
}

// repeated int32 nodeList = 2;
inline int ActionReply::nodelist_size() const {
  return nodelist_.size();
}
inline void ActionReply::clear_nodelist() {
  nodelist_.Clear();
}
inline ::google::protobuf::int32 ActionReply::nodelist(int index) const {
  // @@protoc_insertion_point(field_get:grpcservice.ActionReply.nodeList)
  return nodelist_.Get(index);
}
inline void ActionReply::set_nodelist(int index, ::google::protobuf::int32 value) {
  nodelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpcservice.ActionReply.nodeList)
}
inline void ActionReply::add_nodelist(::google::protobuf::int32 value) {
  nodelist_.Add(value);
  // @@protoc_insertion_point(field_add:grpcservice.ActionReply.nodeList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ActionReply::nodelist() const {
  // @@protoc_insertion_point(field_list:grpcservice.ActionReply.nodeList)
  return nodelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ActionReply::mutable_nodelist() {
  // @@protoc_insertion_point(field_mutable_list:grpcservice.ActionReply.nodeList)
  return &nodelist_;
}

// -------------------------------------------------------------------

// URIReply

// string uri = 1;
inline void URIReply::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& URIReply::uri() const {
  // @@protoc_insertion_point(field_get:grpcservice.URIReply.uri)
  return uri_.GetNoArena();
}
inline void URIReply::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpcservice.URIReply.uri)
}
#if LANG_CXX11
inline void URIReply::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpcservice.URIReply.uri)
}
#endif
inline void URIReply::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpcservice.URIReply.uri)
}
inline void URIReply::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpcservice.URIReply.uri)
}
inline ::std::string* URIReply::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:grpcservice.URIReply.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URIReply::release_uri() {
  // @@protoc_insertion_point(field_release:grpcservice.URIReply.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URIReply::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:grpcservice.URIReply.uri)
}

// -------------------------------------------------------------------

// NumOfRankReply

// int32 numOfRanks = 1;
inline void NumOfRankReply::clear_numofranks() {
  numofranks_ = 0;
}
inline ::google::protobuf::int32 NumOfRankReply::numofranks() const {
  // @@protoc_insertion_point(field_get:grpcservice.NumOfRankReply.numOfRanks)
  return numofranks_;
}
inline void NumOfRankReply::set_numofranks(::google::protobuf::int32 value) {
  
  numofranks_ = value;
  // @@protoc_insertion_point(field_set:grpcservice.NumOfRankReply.numOfRanks)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcservice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grpcservice::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpcservice::ErrorCode>() {
  return ::grpcservice::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::grpcservice::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpcservice::Action>() {
  return ::grpcservice::Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_grpcservice_2eproto
