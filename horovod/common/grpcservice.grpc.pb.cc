// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcservice.proto

#include "grpcservice.pb.h"
#include "grpcservice.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcservice {

static const char* AutobotOperator_method_names[] = {
  "/grpcservice.AutobotOperator/SetMasterURI",
  "/grpcservice.AutobotOperator/GetMasterURI",
  "/grpcservice.AutobotOperator/GetNumOfRanks",
  "/grpcservice.AutobotOperator/GetAction",
  "/grpcservice.AutobotOperator/GraphReady",
  "/grpcservice.AutobotOperator/ReadyToStop",
};

std::unique_ptr< AutobotOperator::Stub> AutobotOperator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AutobotOperator::Stub> stub(new AutobotOperator::Stub(channel));
  return stub;
}

AutobotOperator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetMasterURI_(AutobotOperator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMasterURI_(AutobotOperator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNumOfRanks_(AutobotOperator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAction_(AutobotOperator_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GraphReady_(AutobotOperator_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadyToStop_(AutobotOperator_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AutobotOperator::Stub::SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMasterURI_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMasterURI_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::AsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_SetMasterURI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::PrepareAsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_SetMasterURI_, context, request, false);
}

::grpc::Status AutobotOperator::Stub::GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::URIReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMasterURI_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMasterURI_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>* AutobotOperator::Stub::AsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::URIReply>::Create(channel_.get(), cq, rpcmethod_GetMasterURI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>* AutobotOperator::Stub::PrepareAsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::URIReply>::Create(channel_.get(), cq, rpcmethod_GetMasterURI_, context, request, false);
}

::grpc::Status AutobotOperator::Stub::GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::NumOfRankReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNumOfRanks_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNumOfRanks_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>* AutobotOperator::Stub::AsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::NumOfRankReply>::Create(channel_.get(), cq, rpcmethod_GetNumOfRanks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>* AutobotOperator::Stub::PrepareAsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::NumOfRankReply>::Create(channel_.get(), cq, rpcmethod_GetNumOfRanks_, context, request, false);
}

::grpc::Status AutobotOperator::Stub::GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ActionReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAction_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAction_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>* AutobotOperator::Stub::AsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ActionReply>::Create(channel_.get(), cq, rpcmethod_GetAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>* AutobotOperator::Stub::PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ActionReply>::Create(channel_.get(), cq, rpcmethod_GetAction_, context, request, false);
}

::grpc::Status AutobotOperator::Stub::GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GraphReady_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GraphReady_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::AsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_GraphReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::PrepareAsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_GraphReady_, context, request, false);
}

::grpc::Status AutobotOperator::Stub::ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadyToStop_, context, request, response);
}

void AutobotOperator::Stub::experimental_async::ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadyToStop_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::AsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_ReadyToStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AutobotOperator::Stub::PrepareAsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpcservice::ErrorCodeReply>::Create(channel_.get(), cq, rpcmethod_ReadyToStop_, context, request, false);
}

AutobotOperator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          std::mem_fn(&AutobotOperator::Service::SetMasterURI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::URIReply>(
          std::mem_fn(&AutobotOperator::Service::GetMasterURI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::NumOfRankReply>(
          std::mem_fn(&AutobotOperator::Service::GetNumOfRanks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::ActionReply>(
          std::mem_fn(&AutobotOperator::Service::GetAction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          std::mem_fn(&AutobotOperator::Service::GraphReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutobotOperator_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutobotOperator::Service, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          std::mem_fn(&AutobotOperator::Service::ReadyToStop), this)));
}

AutobotOperator::Service::~Service() {
}

::grpc::Status AutobotOperator::Service::SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutobotOperator::Service::GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutobotOperator::Service::GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutobotOperator::Service::GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutobotOperator::Service::GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutobotOperator::Service::ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcservice

