// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcservice.proto
#ifndef GRPC_grpcservice_2eproto__INCLUDED
#define GRPC_grpcservice_2eproto__INCLUDED

#include "grpcservice.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpcservice {

class AutobotOperator final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcservice.AutobotOperator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> AsyncSetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(AsyncSetMasterURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> PrepareAsyncSetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(PrepareAsyncSetMasterURIRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::URIReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>> AsyncGetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>>(AsyncGetMasterURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>> PrepareAsyncGetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>>(PrepareAsyncGetMasterURIRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::NumOfRankReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>> AsyncGetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>>(AsyncGetNumOfRanksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>> PrepareAsyncGetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>>(PrepareAsyncGetNumOfRanksRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ActionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>> AsyncGetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>>(AsyncGetActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>> PrepareAsyncGetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>>(PrepareAsyncGetActionRaw(context, request, cq));
    }
    virtual ::grpc::Status GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> AsyncGraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(AsyncGraphReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> PrepareAsyncGraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(PrepareAsyncGraphReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> AsyncReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(AsyncReadyToStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>> PrepareAsyncReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>>(PrepareAsyncReadyToStopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* AsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* PrepareAsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>* AsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::URIReply>* PrepareAsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>* AsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::NumOfRankReply>* PrepareAsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>* AsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ActionReply>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* AsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* PrepareAsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* AsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcservice::ErrorCodeReply>* PrepareAsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> AsyncSetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(AsyncSetMasterURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> PrepareAsyncSetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(PrepareAsyncSetMasterURIRaw(context, request, cq));
    }
    ::grpc::Status GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::URIReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>> AsyncGetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>>(AsyncGetMasterURIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>> PrepareAsyncGetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>>(PrepareAsyncGetMasterURIRaw(context, request, cq));
    }
    ::grpc::Status GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::NumOfRankReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>> AsyncGetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>>(AsyncGetNumOfRanksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>> PrepareAsyncGetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>>(PrepareAsyncGetNumOfRanksRaw(context, request, cq));
    }
    ::grpc::Status GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ActionReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>> AsyncGetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>>(AsyncGetActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>> PrepareAsyncGetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>>(PrepareAsyncGetActionRaw(context, request, cq));
    }
    ::grpc::Status GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> AsyncGraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(AsyncGraphReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> PrepareAsyncGraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(PrepareAsyncGraphReadyRaw(context, request, cq));
    }
    ::grpc::Status ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpcservice::ErrorCodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> AsyncReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(AsyncReadyToStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>> PrepareAsyncReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>>(PrepareAsyncReadyToStopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) override;
      void GetMasterURI(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response, std::function<void(::grpc::Status)>) override;
      void GetNumOfRanks(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response, std::function<void(::grpc::Status)>) override;
      void GetAction(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response, std::function<void(::grpc::Status)>) override;
      void GraphReady(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReadyToStop(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* PrepareAsyncSetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>* AsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::URIReply>* PrepareAsyncGetMasterURIRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>* AsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::NumOfRankReply>* PrepareAsyncGetNumOfRanksRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>* AsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ActionReply>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* PrepareAsyncGraphReadyRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* AsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcservice::ErrorCodeReply>* PrepareAsyncReadyToStopRaw(::grpc::ClientContext* context, const ::grpcservice::AutobotJobNode& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetMasterURI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMasterURI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumOfRanks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAction_;
    const ::grpc::internal::RpcMethod rpcmethod_GraphReady_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadyToStop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response);
    virtual ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response);
    virtual ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response);
    virtual ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response);
    virtual ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response);
    virtual ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetMasterURI() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMasterURI(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::ErrorCodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMasterURI() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMasterURI(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::URIReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNumOfRanks() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumOfRanks(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::NumOfRankReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::ActionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GraphReady() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGraphReady(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::ErrorCodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadyToStop() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadyToStop(::grpc::ServerContext* context, ::grpcservice::AutobotJobNode* request, ::grpc::ServerAsyncResponseWriter< ::grpcservice::ErrorCodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetMasterURI<WithAsyncMethod_GetMasterURI<WithAsyncMethod_GetNumOfRanks<WithAsyncMethod_GetAction<WithAsyncMethod_GraphReady<WithAsyncMethod_ReadyToStop<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetMasterURI() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_SetMasterURI<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::ErrorCodeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetMasterURI(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMasterURI() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_GetMasterURI<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::URIReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::URIReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMasterURI(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetNumOfRanks() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_GetNumOfRanks<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::NumOfRankReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::NumOfRankReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNumOfRanks(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAction() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_GetAction<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::ActionReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::ActionReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GraphReady() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_GraphReady<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::ErrorCodeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GraphReady(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReadyToStop() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_ReadyToStop<BaseClass>, ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(
          [this](::grpc::ServerContext* context,
                 const ::grpcservice::AutobotJobNode* request,
                 ::grpcservice::ErrorCodeReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadyToStop(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetMasterURI<ExperimentalWithCallbackMethod_GetMasterURI<ExperimentalWithCallbackMethod_GetNumOfRanks<ExperimentalWithCallbackMethod_GetAction<ExperimentalWithCallbackMethod_GraphReady<ExperimentalWithCallbackMethod_ReadyToStop<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetMasterURI() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMasterURI() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNumOfRanks() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GraphReady() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadyToStop() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetMasterURI() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMasterURI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMasterURI() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMasterURI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetNumOfRanks() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumOfRanks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GraphReady() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGraphReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadyToStop() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadyToStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMasterURI() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_SetMasterURI<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetMasterURI(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMasterURI(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMasterURI() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_GetMasterURI<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMasterURI(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMasterURI(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNumOfRanks() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_GetNumOfRanks<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNumOfRanks(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNumOfRanks(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_GetAction<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAction(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GraphReady() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_GraphReady<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GraphReady(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GraphReady(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadyToStop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_ReadyToStop<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadyToStop(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadyToStop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetMasterURI() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(std::bind(&WithStreamedUnaryMethod_SetMasterURI<BaseClass>::StreamedSetMasterURI, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMasterURI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::ErrorCodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMasterURI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMasterURI() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::URIReply>(std::bind(&WithStreamedUnaryMethod_GetMasterURI<BaseClass>::StreamedGetMasterURI, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMasterURI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMasterURI(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::URIReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMasterURI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::URIReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNumOfRanks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNumOfRanks() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::NumOfRankReply>(std::bind(&WithStreamedUnaryMethod_GetNumOfRanks<BaseClass>::StreamedGetNumOfRanks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNumOfRanks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumOfRanks(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::NumOfRankReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNumOfRanks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::NumOfRankReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::ActionReply>(std::bind(&WithStreamedUnaryMethod_GetAction<BaseClass>::StreamedGetAction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ActionReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::ActionReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GraphReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GraphReady() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(std::bind(&WithStreamedUnaryMethod_GraphReady<BaseClass>::StreamedGraphReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GraphReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GraphReady(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGraphReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::ErrorCodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadyToStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadyToStop() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::grpcservice::AutobotJobNode, ::grpcservice::ErrorCodeReply>(std::bind(&WithStreamedUnaryMethod_ReadyToStop<BaseClass>::StreamedReadyToStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadyToStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadyToStop(::grpc::ServerContext* context, const ::grpcservice::AutobotJobNode* request, ::grpcservice::ErrorCodeReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadyToStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcservice::AutobotJobNode,::grpcservice::ErrorCodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetMasterURI<WithStreamedUnaryMethod_GetMasterURI<WithStreamedUnaryMethod_GetNumOfRanks<WithStreamedUnaryMethod_GetAction<WithStreamedUnaryMethod_GraphReady<WithStreamedUnaryMethod_ReadyToStop<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetMasterURI<WithStreamedUnaryMethod_GetMasterURI<WithStreamedUnaryMethod_GetNumOfRanks<WithStreamedUnaryMethod_GetAction<WithStreamedUnaryMethod_GraphReady<WithStreamedUnaryMethod_ReadyToStop<Service > > > > > > StreamedService;
};

}  // namespace grpcservice


#endif  // GRPC_grpcservice_2eproto__INCLUDED
